{"version":3,"sources":["Components/Buscador/Buscador.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","props","direction","gap","alignItems","justifyContent","width","wrap","maxWidth","href","rel","target","label","placeholder","onChange","setTxtbusqueda","id","inputMode","type","autoFocus","size","Resultado","lazy","App","useState","datos","setDatos","primeracarga","setPrimeracarga","resultadobusqueda","setResultadobusqueda","txtbusqueda","tipoProducto","tipoCanasta","tipoBases","inicioAbasteimiento","filtrobusqueda","nroresultados","setNroresultados","consultarTSV","urlCsv","a","fetch","tsvdata","text","catch","error","console","info","listProductos","infotsvList","split","index","length","element","push","codigo","descCorta","descLarga","inicioAbastecimiento","e","useEffect","listResultado","trim","forEach","producto","includes","toUpperCase","theme","defaultTheme","minHeight","marginX","fallback","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.f9fa65a4.chunk.js","sourcesContent":["\r\nimport React, { Fragment } from 'react';\r\nimport {\r\n    Link,\r\n    Flex,\r\n    SearchField,\r\n    Text\r\n} from '@adobe/react-spectrum'\r\n\r\nconst Buscador = props => {\r\n    return (\r\n        <Fragment>\r\n            <h1>Buscador productos CENABAST</h1>\r\n            <Flex direction=\"row\" gap=\"size-100\" alignItems=\"end\" justifyContent=\"center\" width=\"100%\" wrap=\"wrap\">\r\n                <Text maxWidth=\"800px\" width=\"100%\">\r\n                    <p>Este buscador tiene el proposito de lograr una mejor <Link><a href=\"https://www.interaction-design.org/literature/topics/ux-design\" rel=\"noopener noreferrer\" target=\"_blank\">Experiencia de Usuario</a></Link> al buscar de productos disponibles en farmacias adheridas a <Link><a href=\"https://www.cenabast.cl/\" rel=\"noopener noreferrer\" target=\"_blank\">CENABAST</a></Link>.</p>\r\n                    <p>Puedes ingresar buscar por nombre (o parte del nombre), código de producto, o por términos presentes en la descripción del producto.</p>\r\n                </Text>\r\n                <SearchField\r\n                    label=\"Ingresa el nombre de un producto para realizar la búsqueda\"\r\n                    placeholder=\"Ingresa el producto que deseas buscar\"\r\n                    onChange={props.setTxtbusqueda}\r\n                    width=\"100%\"\r\n                    maxWidth=\"800px\"\r\n                    id=\"buscadorproductos\"\r\n                    inputMode=\"search\"\r\n                    type=\"search\"\r\n                    autoFocus=\"true\"\r\n                    size=\"\"\r\n                />\r\n            </Flex>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Buscador;","import React, {\n  useState,\n  useEffect,\n  Fragment,\n  lazy,\n  Suspense\n} from 'react';\nimport {Provider, defaultTheme, Text, Link, Flex} from '@adobe/react-spectrum';\nimport Buscador from './Components/Buscador/Buscador';\nimport './App.scss'\n\nconst Resultado = lazy(() => import('./Components/Resultado/Resultado'));\n\nconst App = () => {\n  const [datos, setDatos] = useState(false),\n        [primeracarga, setPrimeracarga] = useState(true),\n        [resultadobusqueda, setResultadobusqueda] = useState([]),\n        [txtbusqueda, setTxtbusqueda] = useState(\"\"),\n        [filtrobusqueda, setFiltrobusqueda] = useState({\n          tipoProducto:null,\n          tipoCanasta:null,\n          tipoBases:null,\n          inicioAbasteimiento:null\n        }),\n        [nroresultados, setNroresultados] = useState(0),\n      consultarTSV = async (urlCsv) => {\n        const tsvdata = await fetch(urlCsv),\n          info = await tsvdata.text().catch(error => {\n            console.error(error)\n          })\n        let listProductos = []\n\n        try {\n          let infotsvList = info.split(\"\\n\")\n\n          //Código producto Descripción del producto\tDescripción completa del producto\tTipo de producto\tTipo de canasta\tFecha inicio abastecimiento\tTipo de Bases\n          for (let index = 1; index < infotsvList.length; index++) {\n            const element = infotsvList[index].split(\"\\t\");\n            listProductos.push({\n              codigo:element[0],\n              descCorta:element[1],\n              descLarga:element[2],\n              tipoProducto:element[3],\n              tipoCanasta:element[4],\n              inicioAbastecimiento:element[5],\n              tipoBases:element[6]\n            })\n          }\n          setDatos(listProductos)\n        } catch (e) {\n          /* console.error(e) */\n        }\n      },\n      wait = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n      useEffect(() => {\n        switch (primeracarga) {\n            case true:\n                consultarTSV('./data/Listado.tsv')\n                setPrimeracarga(false)\n                break;                \n\n            case false:\n              let listResultado = []\n              if (txtbusqueda.trim().length > 4) {\n                datos.forEach(producto => {\n                  try {\n                    if(\n                      producto.descCorta.includes(txtbusqueda.toUpperCase()) \n                      || producto.descLarga.includes(txtbusqueda.toUpperCase())\n                      || producto.codigo.includes(txtbusqueda.toUpperCase())\n                      )\n                      {\n                        listResultado.push(producto)\n                      }\n                  } catch (e) {\n                    /* console.error(e) */\n                  }\n                }); \n              }\n              setNroresultados(listResultado.length)\n              setResultadobusqueda(listResultado)\n              break;\n        \n            default:\n                break;\n        }\n        \n    },[datos,filtrobusqueda,txtbusqueda])\n\n  \n\n  return (\n  <Provider theme={defaultTheme} minHeight=\"100vh\" >\n      <Flex direction=\"column\" gap=\"size-100\" alignItems=\"center\" marginX=\"1rem\">\n          <Buscador setTxtbusqueda={setTxtbusqueda}/>\n          <p>{\n          txtbusqueda.trim().length === 0 ? null:\n          nroresultados === 0 ? 'No se encontraron productos':\n          `Hemos encontrado ${nroresultados} ${nroresultados === 1 ? 'producto' : 'productos'}. `\n          }\n          </p>\n          {nroresultados > 0 ? <strong>Para ver la descripción completa haz click sobre el nombre del producto</strong> : null}\n        <Suspense fallback=\"<p>Cargando...</p>\">\n          <Resultado resultadobusqueda={resultadobusqueda}/>\n        </Suspense>\n        \n        <Text maxWidth=\"800px\" width=\"100%\" marginTop=\"2rem\">\n          <p>El documento con datos fue descargado desde la página <Link><a href=\"https://www.cenabast.cl/documentos/canasta-de-productos-cenabast/\" rel=\"noopener noreferrer\" target=\"_blank\">Canasta de Productos</a></Link> el día 29 de Agosto de 2020, donde esta disponible de forma pública.  Para descargar la fuente de datos actualizada por favor dirigete a <Link><a href=\"https://www.cenabast.cl/documentos/canasta-de-productos-cenabast/\" rel=\"noopener noreferrer\" target=\"_blank\">Canasta de Productos de CENABAST</a></Link>.</p>\n          <p>El proyecto se ha realizado con fines educativos, para poner en practica conocimientos de <Link><a href=\"https://www.interaction-design.org/literature/topics/ux-design\" rel=\"noopener noreferrer\" target=\"_blank\">UX</a></Link>, <Link><a href=\"https://es.reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Programación(React)</a></Link> y probar <Link><a href=\"https://react-spectrum.adobe.com/\" rel=\"noopener noreferrer\" target=\"_blank\">React Spectrum</a></Link>. El autor no tiene ninguna relación con <Link><a href=\"https://www.cenabast.cl/\" rel=\"noopener noreferrer\" target=\"_blank\">CENABAST</a></Link> o el Gobierno de Chile.</p>\n          <p>Buscador diseñado y desarrollado por <Link><a href=\"https://antunez.design\" rel=\"noopener noreferrer\" target=\"_blank\">Mauricio Antúnez</a></Link>.</p>\n        </Text>\n      </Flex> \n  </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}