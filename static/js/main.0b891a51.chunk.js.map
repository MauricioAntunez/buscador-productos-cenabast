{"version":3,"sources":["Components/Buscador/Buscador.js","Components/Resultado/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","props","direction","gap","alignItems","justifyContent","width","wrap","maxWidth","href","rel","target","label","placeholder","onChange","setTxtbusqueda","id","inputMode","type","autoFocus","size","Resultado","resultadobusqueda","length","map","producto","precioDot","parseInt","precioMaximoVentaPublico","toLocaleString","nombreComercial","close","tipoProducto","nombreProveedor","variant","onPress","toString","App","useState","datos","setDatos","primeracarga","setPrimeracarga","setResultadobusqueda","txtbusqueda","tipoCanasta","tipoBases","inicioAbasteimiento","filtrobusqueda","nroresultados","setNroresultados","consultarCSV","urlCsv","a","fetch","tsvdata","text","catch","error","console","info","listProductos","infotsvList","split","index","element","push","documentoCompras","zcen","zgen","e","useEffect","listResultado","trim","forEach","includes","toUpperCase","theme","defaultTheme","minHeight","colorScheme","marginX","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.0b891a51.chunk.js","sourcesContent":["\nimport React, { Fragment } from 'react';\nimport {\n    Link,\n    Flex,\n    SearchField,\n    Text\n} from '@adobe/react-spectrum'\n\nconst Buscador = props => {\n    return (\n        <Fragment>\n            <h1>Buscador productos CENABAST</h1>\n            <Flex direction=\"row\" gap=\"size-100\" alignItems=\"end\" justifyContent=\"center\" width=\"100%\" wrap=\"wrap\">\n                <Text maxWidth=\"800px\" width=\"100%\">\n                    <p>Este buscador tiene el proposito de lograr una mejor <Link><a href=\"https://www.interaction-design.org/literature/topics/ux-design\" rel=\"noopener noreferrer\" target=\"_blank\">Experiencia de Usuario</a></Link> al buscar de productos disponibles en farmacias adheridas a <Link><a href=\"https://www.cenabast.cl/\" rel=\"noopener noreferrer\" target=\"_blank\">CENABAST</a></Link>.</p>\n                    <p>Puedes ingresar buscar por nombre (o parte del nombre), código de producto, o por términos presentes en la descripción del producto.</p>\n                </Text>\n                <SearchField\n                    label=\"Ingresa el nombre de un producto para realizar la búsqueda\"\n                    placeholder=\"Ingresa el producto que deseas buscar\"\n                    onChange={props.setTxtbusqueda}\n                    width=\"100%\"\n                    maxWidth=\"800px\"\n                    id=\"buscadorproductos\"\n                    inputMode=\"search\"\n                    type=\"search\"\n                    autoFocus=\"true\"\n                    size=\"\"\n                />\n            </Flex>\n        </Fragment>\n    );\n}\n \nexport default Buscador;","import React, {Fragment} from 'react';\nimport {ActionButton,\n    Button,\n    ButtonGroup,\n    Content,\n    Flex,\n    Dialog,\n    DialogTrigger,\n    Divider,\n    Heading,\n    Header,\n    Text} from '@adobe/react-spectrum';\nconst Resultado = props => {\n    const resultadobusqueda = props.resultadobusqueda\n\n    return (\n        <Fragment>\n            {\n            resultadobusqueda.length > 0 ?\n                resultadobusqueda.map(producto => {\n                    const precioDot = parseInt(producto.precioMaximoVentaPublico).toLocaleString('es-CL')\n                    return (\n                        <DialogTrigger key={producto.nombreComercial.toString()+producto.nombreProveedor.toString()+producto.precioMaximoVentaPublico.toString()}>\n                            <ActionButton width=\"100%\">{producto.nombreComercial}</ActionButton>\n                            {(close) => (\n                            <Dialog>\n                                <Heading>\n                                    <Flex alignItems=\"center\" gap=\"size-100\">\n                                        <Text>{producto.nombreComercial}</Text>\n                                    </Flex>\n                                </Heading>\n                                <Header>\n                                    {producto.tipoProducto}\n                                </Header>\n                                <Divider />\n                                <Content>\n                                    <h3>Precio máximo de venta al público: <strong>${precioDot}</strong></h3>\n                                    <p>Nombre Proveedor: {producto.nombreProveedor}</p>\n                                </Content>\n                                <ButtonGroup>\n                                    <Button variant=\"cta\" onPress={close} autoFocus>\n                                        Cerrar\n                                    </Button>\n                                </ButtonGroup>\n                            </Dialog>\n                            )}\n                        </DialogTrigger>\n                    )\n                })\n            :\n                null\n            }\n        </Fragment>\n    );\n}\n \nexport default Resultado;","import React, {\n  useState,\n  useEffect\n} from 'react';\nimport {Provider, defaultTheme, Text, Link, Flex} from '@adobe/react-spectrum';\nimport Buscador from './Components/Buscador/Buscador';\nimport Resultado from './Components/Resultado/Resultado'\nimport './App.scss'\n\nconst App = () => {\n  const [datos, setDatos] = useState(false),\n        [primeracarga, setPrimeracarga] = useState(true),\n        [resultadobusqueda, setResultadobusqueda] = useState([]),\n        [txtbusqueda, setTxtbusqueda] = useState(\"\"),\n        [filtrobusqueda, setFiltrobusqueda] = useState({\n          tipoProducto:null,\n          tipoCanasta:null,\n          tipoBases:null,\n          inicioAbasteimiento:null\n        }),\n        [nroresultados, setNroresultados] = useState(0),\n      consultarCSV = async (urlCsv) => {\n        const tsvdata = await fetch(urlCsv),\n          info = await tsvdata.text().catch(error => {\n            console.error(error)\n          })\n        let listProductos = []\n\n        try {\n          let infotsvList = info.split(\"\\n\")\n              for (let index = 1; index < infotsvList.length; index++) {\n                const element = infotsvList[index].split(\";\");\n                listProductos.push({\n                  nombreComercial:element[0],\n                  nombreProveedor:element[1],\n                  precioMaximoVentaPublico:element[3],\n                  tipoProducto:element[4],\n                  documentoCompras:element[5],\n                  zcen:element[6],\n                  zgen:element[7]\n                })\n          }\n          setDatos(listProductos)\n        } catch (e) {\n          /* console.error(e) */\n        }\n      }\n\n      useEffect(() => {\n        switch (primeracarga) {\n            case true:\n                consultarCSV('./data/ListadoFarmacias_data.csv')\n                setPrimeracarga(false)\n                break;                \n\n            case false:\n              let listResultado = []\n              if (txtbusqueda.trim().length > 4) {\n                datos.forEach(producto => {\n                  try {\n                    if(\n                      producto.nombreComercial.includes(txtbusqueda.toUpperCase()) \n                      || producto.nombreProveedor.includes(txtbusqueda.toUpperCase())\n                      || producto.precioMaximoVentaPublico.includes(txtbusqueda.toUpperCase())\n                      || producto.tipoProducto.includes(txtbusqueda.toUpperCase())\n                      )\n                      {\n                        listResultado.push(producto)\n                      }\n                  } catch (e) {\n                    /* console.error(e) */\n                  }\n                }); \n              }\n              setNroresultados(listResultado.length)\n              setResultadobusqueda(listResultado)\n              break;\n        \n            default:\n                break;\n        }\n        \n    },[datos,filtrobusqueda,txtbusqueda,primeracarga])\n\n    const providerStyle = {\n      padding: '0 2rem'\n    };\n\n  return (\n  <Provider theme={defaultTheme} minHeight=\"100vh\"  colorScheme=\"dark\" >\n      <Flex direction=\"column\" alignItems=\"center\" marginX=\"size-200\" gap=\"size-100\" maxWidth=\"800px\" marginX=\"auto\">\n          <Buscador setTxtbusqueda={setTxtbusqueda}/>\n          <p>{\n          txtbusqueda.trim().length === 0 ? null:\n          nroresultados === 0 ? 'No se encontraron productos':\n          `Hemos encontrado ${nroresultados} ${nroresultados === 1 ? 'producto' : 'productos'}. `\n          }\n          </p>\n          {nroresultados > 0 ? <strong>Para ver la descripción completa haz click sobre el nombre del producto</strong> : null}\n        \n          <Resultado resultadobusqueda={resultadobusqueda}/>\n        \n        <Text width=\"100%\" marginTop=\"2rem\">\n          <p>El documento con datos fue descargado desde la página <Link><a href=\"https://www.cenabast.cl/lista-de-medicamentos-ley-cenabast/\" rel=\"noopener noreferrer\" target=\"_blank\">Lista de Medicamentos ley Cenabast</a></Link> el día 1 de Septiembre de 2020, donde esta disponible de forma pública.  Para descargar la fuente de datos actualizada por favor dirigete a <Link><a href=\"https://www.cenabast.cl/lista-de-medicamentos-ley-cenabast/\" rel=\"noopener noreferrer\" target=\"_blank\">Lista de Medicamentos – Ley Cenabast</a></Link>. La información contenida en el proyecto es solo referencial y utilizada para mostrar una mejor forma de buscar los productos.</p>\n          <p>El proyecto se ha realizado con fines educativos, para poner en practica conocimientos de <Link><a href=\"https://www.interaction-design.org/literature/topics/ux-design\" rel=\"noopener noreferrer\" target=\"_blank\">UX</a></Link>, <Link><a href=\"https://es.reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Programación(React)</a></Link> y probar <Link><a href=\"https://react-spectrum.adobe.com/\" rel=\"noopener noreferrer\" target=\"_blank\">React Spectrum</a></Link>. El autor no tiene ninguna relación con <Link><a href=\"https://www.cenabast.cl/\" rel=\"noopener noreferrer\" target=\"_blank\">CENABAST</a></Link> o el Gobierno de Chile.</p>\n          <p>Buscador diseñado y desarrollado por <Link><a href=\"https://antunez.design\" rel=\"noopener noreferrer\" target=\"_blank\">Mauricio Antúnez</a></Link>.</p>\n        </Text>\n      </Flex> \n  </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}