{"version":3,"sources":["Components/Buscador/Buscador.js","Components/Resultado/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","props","direction","gap","alignItems","justifyContent","width","wrap","maxWidth","href","rel","target","label","placeholder","onChange","setTxtbusqueda","id","inputMode","type","autoFocus","size","Resultado","resultadobusqueda","length","map","producto","key","codigo","toString","descCorta","close","tipoProducto","descLarga","tipoCanasta","variant","onPress","App","useState","datos","setDatos","primeracarga","setPrimeracarga","setResultadobusqueda","txtbusqueda","tipoBases","inicioAbasteimiento","filtrobusqueda","nroresultados","setNroresultados","consultarTSV","urlCsv","a","fetch","tsvdata","text","catch","error","console","info","listProductos","infotsvList","split","index","element","push","inicioAbastecimiento","e","useEffect","listResultado","trim","forEach","includes","toUpperCase","theme","defaultTheme","minHeight","marginX","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.31e43cec.chunk.js","sourcesContent":["\r\nimport React, { Fragment } from 'react';\r\nimport {\r\n    Link,\r\n    Flex,\r\n    SearchField,\r\n    Text\r\n} from '@adobe/react-spectrum'\r\n\r\nconst Buscador = props => {\r\n    return (\r\n        <Fragment>\r\n            <h1>Buscador productos CENABAST</h1>\r\n            <Flex direction=\"row\" gap=\"size-100\" alignItems=\"end\" justifyContent=\"center\" width=\"100%\" wrap=\"wrap\">\r\n                <Text maxWidth=\"800px\" width=\"100%\">\r\n                    <p>Este buscador tiene el proposito de lograr una mejor <Link><a href=\"https://www.interaction-design.org/literature/topics/ux-design\" rel=\"noopener noreferrer\" target=\"_blank\">Experiencia de Usuario</a></Link> al buscar de productos disponibles en farmacias adheridas a <Link><a href=\"https://www.cenabast.cl/\" rel=\"noopener noreferrer\" target=\"_blank\">CENABAST</a></Link>.</p>\r\n                    <p>Puedes ingresar buscar por nombre (o parte del nombre), código de producto, o por términos presentes en la descripción del producto.</p>\r\n                </Text>\r\n                <SearchField\r\n                    label=\"Ingresa el nombre de un producto para realizar la búsqueda\"\r\n                    placeholder=\"Ingresa el producto que deseas buscar\"\r\n                    onChange={props.setTxtbusqueda}\r\n                    width=\"100%\"\r\n                    maxWidth=\"800px\"\r\n                    id=\"buscadorproductos\"\r\n                    inputMode=\"search\"\r\n                    type=\"search\"\r\n                    autoFocus=\"true\"\r\n                    size=\"\"\r\n                />\r\n            </Flex>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Buscador;","import React, {Fragment} from 'react';\r\nimport {ActionButton,\r\n    Button,\r\n    ButtonGroup,\r\n    Content,\r\n    Flex,\r\n    Footer,\r\n    Dialog,\r\n    DialogTrigger,\r\n    Divider,\r\n    Heading,\r\n    Header,\r\n    Text} from '@adobe/react-spectrum';\r\nconst Resultado = props => {\r\n    const resultadobusqueda = props.resultadobusqueda\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n            resultadobusqueda.length > 0 ?\r\n                resultadobusqueda.map(producto => {\r\n                    return (\r\n                        <DialogTrigger key={producto.codigo.toString()}>\r\n                            <ActionButton width=\"100%\" maxWidth=\"800px\">{producto.descCorta}</ActionButton>\r\n                            {(close) => (\r\n                            <Dialog>\r\n                                <Heading>\r\n                                    <Flex alignItems=\"center\" gap=\"size-100\">\r\n                                        <Text>{producto.descCorta}</Text>\r\n                                    </Flex>\r\n                                </Heading>\r\n                                <Header>\r\n                                    {producto.tipoProducto}\r\n                                </Header>\r\n                                <Divider />\r\n                                <Content>\r\n                                    <Text>\r\n                                        {producto.descLarga}\r\n                                    </Text>        \r\n                                    <Text></Text>\r\n                                </Content>\r\n                                <Footer>\r\n                                    <Text>{producto.tipoCanasta}</Text>\r\n                                </Footer>\r\n                                <ButtonGroup>\r\n                                    <Button variant=\"cta\" onPress={close} autoFocus>\r\n                                        Cerrar\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            </Dialog>\r\n                            )}\r\n                        </DialogTrigger>\r\n                    )\r\n                })\r\n            :\r\n                null\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Resultado;","import React, {\r\n  useState,\r\n  useEffect\r\n} from 'react';\r\nimport {Provider, defaultTheme, Text, Link, Flex} from '@adobe/react-spectrum';\r\nimport Buscador from './Components/Buscador/Buscador';\r\nimport Resultado from './Components/Resultado/Resultado'\r\nimport './App.scss'\r\n\r\nconst App = () => {\r\n  const [datos, setDatos] = useState(false),\r\n        [primeracarga, setPrimeracarga] = useState(true),\r\n        [resultadobusqueda, setResultadobusqueda] = useState([]),\r\n        [txtbusqueda, setTxtbusqueda] = useState(\"\"),\r\n        [filtrobusqueda, setFiltrobusqueda] = useState({\r\n          tipoProducto:null,\r\n          tipoCanasta:null,\r\n          tipoBases:null,\r\n          inicioAbasteimiento:null\r\n        }),\r\n        [nroresultados, setNroresultados] = useState(0),\r\n      consultarTSV = async (urlCsv) => {\r\n        const tsvdata = await fetch(urlCsv),\r\n          info = await tsvdata.text().catch(error => {\r\n            console.error(error)\r\n          })\r\n        let listProductos = []\r\n\r\n        try {\r\n          let infotsvList = info.split(\"\\n\")\r\n\r\n          //Código producto Descripción del producto\tDescripción completa del producto\tTipo de producto\tTipo de canasta\tFecha inicio abastecimiento\tTipo de Bases\r\n          for (let index = 1; index < infotsvList.length; index++) {\r\n            const element = infotsvList[index].split(\"\\t\");\r\n            listProductos.push({\r\n              codigo:element[0],\r\n              descCorta:element[1],\r\n              descLarga:element[2],\r\n              tipoProducto:element[3],\r\n              tipoCanasta:element[4],\r\n              inicioAbastecimiento:element[5],\r\n              tipoBases:element[6]\r\n            })\r\n          }\r\n          setDatos(listProductos)\r\n        } catch (e) {\r\n          /* console.error(e) */\r\n        }\r\n      },\r\n      wait = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n      useEffect(() => {\r\n        switch (primeracarga) {\r\n            case true:\r\n                consultarTSV('./data/Listado.tsv')\r\n                setPrimeracarga(false)\r\n                break;                \r\n\r\n            case false:\r\n              let listResultado = []\r\n              if (txtbusqueda.trim().length > 4) {\r\n                datos.forEach(producto => {\r\n                  try {\r\n                    if(\r\n                      producto.descCorta.includes(txtbusqueda.toUpperCase()) \r\n                      || producto.descLarga.includes(txtbusqueda.toUpperCase())\r\n                      || producto.codigo.includes(txtbusqueda.toUpperCase())\r\n                      )\r\n                      {\r\n                        listResultado.push(producto)\r\n                      }\r\n                  } catch (e) {\r\n                    /* console.error(e) */\r\n                  }\r\n                }); \r\n              }\r\n              setNroresultados(listResultado.length)\r\n              setResultadobusqueda(listResultado)\r\n              break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n        \r\n    },[datos,filtrobusqueda,txtbusqueda])\r\n\r\n  \r\n\r\n  return (\r\n  <Provider theme={defaultTheme} minHeight=\"100vh\" >\r\n      <Flex direction=\"column\" gap=\"size-100\" alignItems=\"center\" marginX=\"1rem\">\r\n          <Buscador setTxtbusqueda={setTxtbusqueda}/>\r\n          <p>{\r\n          txtbusqueda.trim().length === 0 ? null:\r\n          nroresultados === 0 ? 'No se encontraron productos':\r\n          `Hemos encontrado ${nroresultados} ${nroresultados === 1 ? 'producto' : 'productos'}. `\r\n          }\r\n          </p>\r\n          {nroresultados > 0 ? <strong>Para ver la descripción completa haz click sobre el nombre del producto</strong> : null}\r\n        \r\n          <Resultado resultadobusqueda={resultadobusqueda}/>\r\n        \r\n        <Text maxWidth=\"800px\" width=\"100%\" marginTop=\"2rem\">\r\n          <p>El documento con datos fue descargado desde la página <Link><a href=\"https://www.cenabast.cl/documentos/canasta-de-productos-cenabast/\" rel=\"noopener noreferrer\" target=\"_blank\">Canasta de Productos</a></Link> el día 29 de Agosto de 2020, donde esta disponible de forma pública.  Para descargar la fuente de datos actualizada por favor dirigete a <Link><a href=\"https://www.cenabast.cl/documentos/canasta-de-productos-cenabast/\" rel=\"noopener noreferrer\" target=\"_blank\">Canasta de Productos de CENABAST</a></Link>.</p>\r\n          <p>El proyecto se ha realizado con fines educativos, para poner en practica conocimientos de <Link><a href=\"https://www.interaction-design.org/literature/topics/ux-design\" rel=\"noopener noreferrer\" target=\"_blank\">UX</a></Link>, <Link><a href=\"https://es.reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Programación(React)</a></Link> y probar <Link><a href=\"https://react-spectrum.adobe.com/\" rel=\"noopener noreferrer\" target=\"_blank\">React Spectrum</a></Link>. El autor no tiene ninguna relación con <Link><a href=\"https://www.cenabast.cl/\" rel=\"noopener noreferrer\" target=\"_blank\">CENABAST</a></Link> o el Gobierno de Chile.</p>\r\n          <p>Buscador diseñado y desarrollado por <Link><a href=\"https://antunez.design\" rel=\"noopener noreferrer\" target=\"_blank\">Mauricio Antúnez</a></Link>.</p>\r\n        </Text>\r\n      </Flex> \r\n  </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}